
ejemplo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000248  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000308  08000310  00010310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000308  08000308  00010310  2**0
                  CONTENTS
  4 .ARM          00000000  08000308  08000308  00010310  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000308  08000310  00010310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000308  08000308  00010308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800030c  0800030c  0001030c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000310  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000310  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010310  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010338  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000019a  00000000  00000000  0001037b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000cb  00000000  00000000  00010515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  000105e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000033  00000000  00000000  00010630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f94  00000000  00000000  00010663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004f8  00000000  00000000  000115f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003de7  00000000  00000000  00011aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000007c  00000000  00000000  000158d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  00015954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080002f0 	.word	0x080002f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080002f0 	.word	0x080002f0

08000108 <main>:
#define BIT0						(1 << 0)

void delay_ms(uint16_t n);
int isButtonPressed(uint32_t *ptr_idr, uint32_t bit);

int main(void) {
 8000108:	b580      	push	{r7, lr}
 800010a:	b086      	sub	sp, #24
 800010c:	af00      	add	r7, sp, #0
    uint32_t *ptr_rcc_iopenr = RCC_IOPENR_ADDRESS;  // Pointer variable para iopenr
 800010e:	4b35      	ldr	r3, [pc, #212]	; (80001e4 <main+0xdc>)
 8000110:	613b      	str	r3, [r7, #16]
    uint32_t *ptr_gpioc_moder = GPIOC_MODER_REG;   // Pointer variable to GPIOC, MODER register
 8000112:	4b35      	ldr	r3, [pc, #212]	; (80001e8 <main+0xe0>)
 8000114:	60fb      	str	r3, [r7, #12]
    uint32_t *ptr_gpioc_odr = GPIOC_ODR_REG;       // Pointer variable to GPIOC, ODR register
 8000116:	4b35      	ldr	r3, [pc, #212]	; (80001ec <main+0xe4>)
 8000118:	60bb      	str	r3, [r7, #8]
    uint32_t *ptr_gpioc_idr = GPIOC_IDR_REG;       // Pointer variable to GPIOC, ODR register
 800011a:	4b35      	ldr	r3, [pc, #212]	; (80001f0 <main+0xe8>)
 800011c:	607b      	str	r3, [r7, #4]
   // uint32_t *ptr_gpioc_pupd = GPIOC_PUPD_REG;     // Pointer variable to GPIOC, PUPD register


    // GPIOC
    *ptr_rcc_iopenr |= 1 << 2;
 800011e:	693b      	ldr	r3, [r7, #16]
 8000120:	681b      	ldr	r3, [r3, #0]
 8000122:	2204      	movs	r2, #4
 8000124:	431a      	orrs	r2, r3
 8000126:	693b      	ldr	r3, [r7, #16]
 8000128:	601a      	str	r2, [r3, #0]


    // GPIOC
    // PC9 se define como entrada para el primer boton
    *ptr_gpioc_moder &= ~(1 << 18);
 800012a:	68fb      	ldr	r3, [r7, #12]
 800012c:	681b      	ldr	r3, [r3, #0]
 800012e:	4a31      	ldr	r2, [pc, #196]	; (80001f4 <main+0xec>)
 8000130:	401a      	ands	r2, r3
 8000132:	68fb      	ldr	r3, [r7, #12]
 8000134:	601a      	str	r2, [r3, #0]
    *ptr_gpioc_moder &= ~(1 << 19);
 8000136:	68fb      	ldr	r3, [r7, #12]
 8000138:	681b      	ldr	r3, [r3, #0]
 800013a:	4a2f      	ldr	r2, [pc, #188]	; (80001f8 <main+0xf0>)
 800013c:	401a      	ands	r2, r3
 800013e:	68fb      	ldr	r3, [r7, #12]
 8000140:	601a      	str	r2, [r3, #0]
    // GPIOC
    // PC8 se define como entrada para el segundo boton
    *ptr_gpioc_moder &= ~(1 << 16);
 8000142:	68fb      	ldr	r3, [r7, #12]
 8000144:	681b      	ldr	r3, [r3, #0]
 8000146:	4a2d      	ldr	r2, [pc, #180]	; (80001fc <main+0xf4>)
 8000148:	401a      	ands	r2, r3
 800014a:	68fb      	ldr	r3, [r7, #12]
 800014c:	601a      	str	r2, [r3, #0]
    *ptr_gpioc_moder &= ~(1 << 17);
 800014e:	68fb      	ldr	r3, [r7, #12]
 8000150:	681b      	ldr	r3, [r3, #0]
 8000152:	4a2b      	ldr	r2, [pc, #172]	; (8000200 <main+0xf8>)
 8000154:	401a      	ands	r2, r3
 8000156:	68fb      	ldr	r3, [r7, #12]
 8000158:	601a      	str	r2, [r3, #0]


    // PC0 como la salida para la LED

    *ptr_gpioc_moder &= ~(1 << 1);
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	2202      	movs	r2, #2
 8000160:	4393      	bics	r3, r2
 8000162:	001a      	movs	r2, r3
 8000164:	68fb      	ldr	r3, [r7, #12]
 8000166:	601a      	str	r2, [r3, #0]



    uint8_t contador= 0;
 8000168:	2317      	movs	r3, #23
 800016a:	18fb      	adds	r3, r7, r3
 800016c:	2200      	movs	r2, #0
 800016e:	701a      	strb	r2, [r3, #0]
    uint8_t prevButtonState = 0;  // Variable para almacenar el estado anterior del botón
 8000170:	1cfb      	adds	r3, r7, #3
 8000172:	2200      	movs	r2, #0
 8000174:	701a      	strb	r2, [r3, #0]

    while (1) {
    	// Verificar si el botón PC8 está presionado (flanco de bajada)
    	uint8_t currentButtonState = (*ptr_gpioc_idr & (1 << 8)) ? 1 : 0;
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	0a1b      	lsrs	r3, r3, #8
 800017c:	b2da      	uxtb	r2, r3
 800017e:	1cbb      	adds	r3, r7, #2
 8000180:	2101      	movs	r1, #1
 8000182:	400a      	ands	r2, r1
 8000184:	701a      	strb	r2, [r3, #0]
    	if (currentButtonState == 0 && prevButtonState == 1) {
 8000186:	1cbb      	adds	r3, r7, #2
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d109      	bne.n	80001a2 <main+0x9a>
 800018e:	1cfb      	adds	r3, r7, #3
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	2b01      	cmp	r3, #1
 8000194:	d105      	bne.n	80001a2 <main+0x9a>
    	     // Incrementar el contador cuando se detecta el flanco de bajada
    	       contador++;
 8000196:	2117      	movs	r1, #23
 8000198:	187b      	adds	r3, r7, r1
 800019a:	781a      	ldrb	r2, [r3, #0]
 800019c:	187b      	adds	r3, r7, r1
 800019e:	3201      	adds	r2, #1
 80001a0:	701a      	strb	r2, [r3, #0]
    	}

        // Verificar si el botón PC13 está presionado
        if (*ptr_gpioc_idr &= ~(1 << 9)) {
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	4a17      	ldr	r2, [pc, #92]	; (8000204 <main+0xfc>)
 80001a8:	401a      	ands	r2, r3
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	601a      	str	r2, [r3, #0]
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d009      	beq.n	80001ca <main+0xc2>
            // Parpadear el LED a 200 ms
            *ptr_gpioc_odr ^= (1 << 0);
 80001b6:	68bb      	ldr	r3, [r7, #8]
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	2201      	movs	r2, #1
 80001bc:	405a      	eors	r2, r3
 80001be:	68bb      	ldr	r3, [r7, #8]
 80001c0:	601a      	str	r2, [r3, #0]
            delay_ms(200);
 80001c2:	20c8      	movs	r0, #200	; 0xc8
 80001c4:	f000 f820 	bl	8000208 <delay_ms>
 80001c8:	e7d5      	b.n	8000176 <main+0x6e>
        } else {
            // Parpadear el LED a 500 ms
            *ptr_gpioc_odr ^= (1 << 0);
 80001ca:	68bb      	ldr	r3, [r7, #8]
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	2201      	movs	r2, #1
 80001d0:	405a      	eors	r2, r3
 80001d2:	68bb      	ldr	r3, [r7, #8]
 80001d4:	601a      	str	r2, [r3, #0]
            delay_ms(500);
 80001d6:	23fa      	movs	r3, #250	; 0xfa
 80001d8:	005b      	lsls	r3, r3, #1
 80001da:	0018      	movs	r0, r3
 80001dc:	f000 f814 	bl	8000208 <delay_ms>
    while (1) {
 80001e0:	e7c9      	b.n	8000176 <main+0x6e>
 80001e2:	46c0      	nop			; (mov r8, r8)
 80001e4:	4002102c 	.word	0x4002102c
 80001e8:	50000800 	.word	0x50000800
 80001ec:	50000814 	.word	0x50000814
 80001f0:	50000810 	.word	0x50000810
 80001f4:	fffbffff 	.word	0xfffbffff
 80001f8:	fff7ffff 	.word	0xfff7ffff
 80001fc:	fffeffff 	.word	0xfffeffff
 8000200:	fffdffff 	.word	0xfffdffff
 8000204:	fffffdff 	.word	0xfffffdff

08000208 <delay_ms>:
    }

    return 0;
}

void delay_ms(uint16_t n) {
 8000208:	b580      	push	{r7, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	af00      	add	r7, sp, #0
 800020e:	0002      	movs	r2, r0
 8000210:	1dbb      	adds	r3, r7, #6
 8000212:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (; n > 0; n--)
 8000214:	e014      	b.n	8000240 <delay_ms+0x38>
        for (i = 0; i < 140; i++)
 8000216:	230e      	movs	r3, #14
 8000218:	18fb      	adds	r3, r7, r3
 800021a:	2200      	movs	r2, #0
 800021c:	801a      	strh	r2, [r3, #0]
 800021e:	e005      	b.n	800022c <delay_ms+0x24>
 8000220:	210e      	movs	r1, #14
 8000222:	187b      	adds	r3, r7, r1
 8000224:	881a      	ldrh	r2, [r3, #0]
 8000226:	187b      	adds	r3, r7, r1
 8000228:	3201      	adds	r2, #1
 800022a:	801a      	strh	r2, [r3, #0]
 800022c:	230e      	movs	r3, #14
 800022e:	18fb      	adds	r3, r7, r3
 8000230:	881b      	ldrh	r3, [r3, #0]
 8000232:	2b8b      	cmp	r3, #139	; 0x8b
 8000234:	d9f4      	bls.n	8000220 <delay_ms+0x18>
    for (; n > 0; n--)
 8000236:	1dbb      	adds	r3, r7, #6
 8000238:	881a      	ldrh	r2, [r3, #0]
 800023a:	1dbb      	adds	r3, r7, #6
 800023c:	3a01      	subs	r2, #1
 800023e:	801a      	strh	r2, [r3, #0]
 8000240:	1dbb      	adds	r3, r7, #6
 8000242:	881b      	ldrh	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d1e6      	bne.n	8000216 <delay_ms+0xe>
            ;
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	46bd      	mov	sp, r7
 800024e:	b004      	add	sp, #16
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000254:	480d      	ldr	r0, [pc, #52]	; (800028c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000256:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000258:	e000      	b.n	800025c <Reset_Handler+0x8>
 800025a:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800025c:	480c      	ldr	r0, [pc, #48]	; (8000290 <LoopForever+0x6>)
  ldr r1, =_edata
 800025e:	490d      	ldr	r1, [pc, #52]	; (8000294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000260:	4a0d      	ldr	r2, [pc, #52]	; (8000298 <LoopForever+0xe>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000264:	e002      	b.n	800026c <LoopCopyDataInit>

08000266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026a:	3304      	adds	r3, #4

0800026c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800026c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000270:	d3f9      	bcc.n	8000266 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000272:	4a0a      	ldr	r2, [pc, #40]	; (800029c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000274:	4c0a      	ldr	r4, [pc, #40]	; (80002a0 <LoopForever+0x16>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000278:	e001      	b.n	800027e <LoopFillZerobss>

0800027a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800027c:	3204      	adds	r2, #4

0800027e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000280:	d3fb      	bcc.n	800027a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000282:	f000 f811 	bl	80002a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000286:	f7ff ff3f 	bl	8000108 <main>

0800028a <LoopForever>:

LoopForever:
  b LoopForever
 800028a:	e7fe      	b.n	800028a <LoopForever>
  ldr   r0, =_estack
 800028c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000294:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000298:	08000310 	.word	0x08000310
  ldr r2, =_sbss
 800029c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a0:	2000001c 	.word	0x2000001c

080002a4 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a4:	e7fe      	b.n	80002a4 <ADC_COMP_IRQHandler>
	...

080002a8 <__libc_init_array>:
 80002a8:	b570      	push	{r4, r5, r6, lr}
 80002aa:	2600      	movs	r6, #0
 80002ac:	4c0c      	ldr	r4, [pc, #48]	; (80002e0 <__libc_init_array+0x38>)
 80002ae:	4d0d      	ldr	r5, [pc, #52]	; (80002e4 <__libc_init_array+0x3c>)
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	10a4      	asrs	r4, r4, #2
 80002b4:	42a6      	cmp	r6, r4
 80002b6:	d109      	bne.n	80002cc <__libc_init_array+0x24>
 80002b8:	2600      	movs	r6, #0
 80002ba:	f000 f819 	bl	80002f0 <_init>
 80002be:	4c0a      	ldr	r4, [pc, #40]	; (80002e8 <__libc_init_array+0x40>)
 80002c0:	4d0a      	ldr	r5, [pc, #40]	; (80002ec <__libc_init_array+0x44>)
 80002c2:	1b64      	subs	r4, r4, r5
 80002c4:	10a4      	asrs	r4, r4, #2
 80002c6:	42a6      	cmp	r6, r4
 80002c8:	d105      	bne.n	80002d6 <__libc_init_array+0x2e>
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	00b3      	lsls	r3, r6, #2
 80002ce:	58eb      	ldr	r3, [r5, r3]
 80002d0:	4798      	blx	r3
 80002d2:	3601      	adds	r6, #1
 80002d4:	e7ee      	b.n	80002b4 <__libc_init_array+0xc>
 80002d6:	00b3      	lsls	r3, r6, #2
 80002d8:	58eb      	ldr	r3, [r5, r3]
 80002da:	4798      	blx	r3
 80002dc:	3601      	adds	r6, #1
 80002de:	e7f2      	b.n	80002c6 <__libc_init_array+0x1e>
 80002e0:	08000308 	.word	0x08000308
 80002e4:	08000308 	.word	0x08000308
 80002e8:	0800030c 	.word	0x0800030c
 80002ec:	08000308 	.word	0x08000308

080002f0 <_init>:
 80002f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f6:	bc08      	pop	{r3}
 80002f8:	469e      	mov	lr, r3
 80002fa:	4770      	bx	lr

080002fc <_fini>:
 80002fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000302:	bc08      	pop	{r3}
 8000304:	469e      	mov	lr, r3
 8000306:	4770      	bx	lr
